#!/usr/bin/python
# A program to control a Delcom Engineering USB Numeric Display (USB ID 0fc5:1227)
# http://www.delcomproducts.com/products_USBNDisplay.asp
# 29 July 2010, Copyright 2010 Stuart Pook http://www.pook.it/
# Tested on Python 2.5.5
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import os.path
import sys
import getopt
import time
import select
import stat
import math
import pwd

myname = os.path.basename(sys.argv[0])
verbose = False
seconds = False
fork = False
options = [ "chown=", "control=", "decimals=", "debug=", "format=", "update=", "fork", "delay=", "verbose", "noverbose", ]
dots = "10100"
format = "%H%M%S"
update = 1
debug = None
control = None
chown = None
def usage():
	sys.exit("usage: " + myname + " " + str(options))
try:
	opts, args = getopt.getopt(sys.argv[1:], "v", options)
except getopt.GetoptError:
	print "help"
	usage()
for o, a in opts:
	if o in ("--fork"):
		fork = True
	elif o in ("--chown"):
		chown = a
	elif o in ("--decimals"):
		dots = a
	elif o in ("--format"):
		format = a
	elif o in ("--control"):
		control = a
	elif o in ("--debug"):
		debug = open(a, "w")
	elif o in ("--update"):
		update = int(a)
	elif o in ("-v", "--verbose"):
		debug = open("/dev/stdout", "w")
	elif o in ("--noverbose"):
		debug = None
	else:
		print "bad option", o
		usage()

device = args[0]
debug == None or debug.write("device " + device + "\n")
def message(debug, mess):
	if debug != None:
		debug.write(mess + "\n")
		debug.flush()
		
if chown != None:
	chown = pwd.getpwnam(chown)
		
poller = select.poll()
if control != None:
	if not os.path.exists(control):
		os.mkfifo(control,  0600)
		if chown != None:
			os.chown(control,  chown.pw_uid,  chown.pw_gid)
			message(debug, "chown " + control + " to " + str(chown.pw_uid) + " " + str(chown.pw_gid))
	message(debug, "opening for read " + control)
	control_fd = os.open(control,  os.O_RDONLY | os.O_NONBLOCK)
	if not stat.S_ISFIFO(os.fstat(control_fd)[stat.ST_MODE]):
		sys.exit(control + " is not a pipe");
	poller.register(control_fd)
	keep_it_open_so_do_not_block = os.open(control,  os.O_WRONLY)
	message(debug, "opened " + control)

level = os.path.join(device, "../power/level")
power = open(level)
power_required = "auto\n"
old_power = power.readline()
power.close()
if fork and os.fork() != 0:
	sys.exit(0)
	
if old_power != power_required:
	message(debug, "power was " + old_power)
	power = open(level, "w")
	power.write(power_required)
	power.close()
	time.sleep(5.0) # magic delay value

def set_parameter(device, file, value, debug):
	name = os.path.join(device, file)
	f = open(name, "w")
	f.write(value + "\n")
	f.close()
	message(debug, "set " + name + " to " + value)
	
set_parameter(device, "powered", "1", debug)
set_parameter(device, "mode_msb", "8", debug)
set_parameter(device, "mode_lsb", "255", debug)
set_parameter(device, "textmode", "ascii", debug)

text = open(os.path.join(device, "text"), "w", buffering=0)

command_gap = 25
time.sleep(command_gap / 1000.0)

text.write("888888\n")
time.sleep(command_gap / 1000.0)
decimals = open(os.path.join(device, "decimals"), "w", buffering=0)
decimals.write(dots + "\n")
#set_parameter(device, "decimals", decimals, debug)
time.sleep(command_gap / 1000.0)

message(debug, "starting " + format + " " + str(update))
on = True
while True:
	now = time.time()
	if on:
		localtime = time.localtime(now)
		out = time.strftime(format, localtime)
	else:
		out = ""
	text.write(out + '\n')
	# this line is the hardest to get right
	delay = update - now % 60 % update
	rdelay =  int(math.ceil(delay * 1000))
	if rdelay < command_gap + 1:
		message(debug, "rdelay too small " + str(rdelay))
		rdelay = command_gap
	message(debug, '[' + out + "] delay=" + str(delay) + " " + str(now) + " " + str(localtime.tm_sec) + ' ' + str(now % 60) + " " + str(rdelay))
	read = poller.poll(rdelay)
	if read != []:
		message(debug, "something to read")
		s = os.read(read[0][0],  100)
		message(debug, "read " + s)
		old_on = on
		for c in s:
			if c == "0":
				on = False
			elif c == "1":
				on = True
			elif c == '~':
				on = not on
		time.sleep(command_gap / 1000.0)
		if old_on != on:
			if on:
				decimals.write(dots + "\n")
			else:
				decimals.write("\n")
			message(debug, "powered " + str(on))
			time.sleep(command_gap / 1000.0)
